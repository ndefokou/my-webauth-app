{"id":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","dependencies":[{"name":"/home/arthur/Desktop/my-webauth-app/package.json","includedInParent":true,"mtime":1740038308393},{"name":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/package.json","includedInParent":true,"mtime":1740036653603},{"name":"../util","loc":{"line":2,"column":26,"index":41},"parent":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","resolved":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/util.js"},{"name":"buffer","parent":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","resolved":"/home/arthur/.nvm/versions/node/v22.9.0/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict';\r\nconst { cppdb } = require('../util');\r\n\r\nmodule.exports = function defineTable(name, factory) {\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (!name) throw new TypeError('Virtual table module name cannot be an empty string');\r\n\r\n\t// Determine whether the module is eponymous-only or not\r\n\tlet eponymous = false;\r\n\tif (typeof factory === 'object' && factory !== null) {\r\n\t\teponymous = true;\r\n\t\tfactory = defer(parseTableDefinition(factory, 'used', name));\r\n\t} else {\r\n\t\tif (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\r\n\t\tfactory = wrapFactory(factory);\r\n\t}\r\n\r\n\tthis[cppdb].table(factory, name, eponymous);\r\n\treturn this;\r\n};\r\n\r\nfunction wrapFactory(factory) {\r\n\treturn function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\r\n\t\tconst thisObject = {\r\n\t\t\tmodule: moduleName,\r\n\t\t\tdatabase: databaseName,\r\n\t\t\ttable: tableName,\r\n\t\t};\r\n\r\n\t\t// Generate a new table definition by invoking the factory\r\n\t\tconst def = apply.call(factory, thisObject, args);\r\n\t\tif (typeof def !== 'object' || def === null) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\r\n\t\t}\r\n\r\n\t\treturn parseTableDefinition(def, 'returned', moduleName);\r\n\t};\r\n}\r\n\r\nfunction parseTableDefinition(def, verb, moduleName) {\r\n\t// Validate required properties\r\n\tif (!hasOwnProperty.call(def, 'rows')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\r\n\t}\r\n\tif (!hasOwnProperty.call(def, 'columns')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\r\n\t}\r\n\r\n\t// Validate \"rows\" property\r\n\tconst rows = def.rows;\r\n\tif (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\r\n\t}\r\n\r\n\t// Validate \"columns\" property\r\n\tlet columns = def.columns;\r\n\tif (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\r\n\t}\r\n\tif (columns.length !== new Set(columns).size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\r\n\t}\r\n\tif (!columns.length) {\r\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\r\n\t}\r\n\r\n\t// Validate \"parameters\" property\r\n\tlet parameters;\r\n\tif (hasOwnProperty.call(def, 'parameters')) {\r\n\t\tparameters = def.parameters;\r\n\t\tif (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\r\n\t\t}\r\n\t} else {\r\n\t\tparameters = inferParameters(rows);\r\n\t}\r\n\tif (parameters.length !== new Set(parameters).size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\r\n\t}\r\n\tif (parameters.length > 32) {\r\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\r\n\t}\r\n\tfor (const parameter of parameters) {\r\n\t\tif (columns.includes(parameter)) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Validate \"safeIntegers\" option\r\n\tlet safeIntegers = 2;\r\n\tif (hasOwnProperty.call(def, 'safeIntegers')) {\r\n\t\tconst bool = def.safeIntegers;\r\n\t\tif (typeof bool !== 'boolean') {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\r\n\t\t}\r\n\t\tsafeIntegers = +bool;\r\n\t}\r\n\r\n\t// Validate \"directOnly\" option\r\n\tlet directOnly = false;\r\n\tif (hasOwnProperty.call(def, 'directOnly')) {\r\n\t\tdirectOnly = def.directOnly;\r\n\t\tif (typeof directOnly !== 'boolean') {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Generate SQL for the virtual table definition\r\n\tconst columnDefinitions = [\r\n\t\t...parameters.map(identifier).map(str => `${str} HIDDEN`),\r\n\t\t...columns.map(identifier),\r\n\t];\r\n\treturn [\r\n\t\t`CREATE TABLE x(${columnDefinitions.join(', ')});`,\r\n\t\twrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),\r\n\t\tparameters,\r\n\t\tsafeIntegers,\r\n\t\tdirectOnly,\r\n\t];\r\n}\r\n\r\nfunction wrapGenerator(generator, columnMap, moduleName) {\r\n\treturn function* virtualTable(...args) {\r\n\t\t/*\r\n\t\t\tWe must defensively clone any buffers in the arguments, because\r\n\t\t\totherwise the generator could mutate one of them, which would cause\r\n\t\t\tus to return incorrect values for hidden columns, potentially\r\n\t\t\tcorrupting the database.\r\n\t\t */\r\n\t\tconst output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\r\n\t\tfor (let i = 0; i < columnMap.size; ++i) {\r\n\t\t\toutput.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\r\n\t\t}\r\n\t\tfor (const row of generator(...args)) {\r\n\t\t\tif (Array.isArray(row)) {\r\n\t\t\t\textractRowArray(row, output, columnMap.size, moduleName);\r\n\t\t\t\tyield output;\r\n\t\t\t} else if (typeof row === 'object' && row !== null) {\r\n\t\t\t\textractRowObject(row, output, columnMap, moduleName);\r\n\t\t\t\tyield output;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction extractRowArray(row, output, columnCount, moduleName) {\r\n\tif (row.length !== columnCount) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\r\n\t}\r\n\tconst offset = output.length - columnCount;\r\n\tfor (let i = 0; i < columnCount; ++i) {\r\n\t\toutput[i + offset] = row[i];\r\n\t}\r\n}\r\n\r\nfunction extractRowObject(row, output, columnMap, moduleName) {\r\n\tlet count = 0;\r\n\tfor (const key of Object.keys(row)) {\r\n\t\tconst index = columnMap.get(key);\r\n\t\tif (index === undefined) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\r\n\t\t}\r\n\t\toutput[index] = row[key];\r\n\t\tcount += 1;\r\n\t}\r\n\tif (count !== columnMap.size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\r\n\t}\r\n}\r\n\r\nfunction inferParameters({ length }) {\r\n\tif (!Number.isInteger(length) || length < 0) {\r\n\t\tthrow new TypeError('Expected function.length to be a positive integer');\r\n\t}\r\n\tconst params = [];\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tparams.push(`$${i + 1}`);\r\n\t}\r\n\treturn params;\r\n}\r\n\r\nconst { hasOwnProperty } = Object.prototype;\r\nconst { apply } = Function.prototype;\r\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*(){});\r\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\r\nconst defer = x => () => x;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}}],"sources":{"node_modules/better-sqlite3-multiple-ciphers/lib/methods/table.js":"'use strict';\r\nconst { cppdb } = require('../util');\r\n\r\nmodule.exports = function defineTable(name, factory) {\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (!name) throw new TypeError('Virtual table module name cannot be an empty string');\r\n\r\n\t// Determine whether the module is eponymous-only or not\r\n\tlet eponymous = false;\r\n\tif (typeof factory === 'object' && factory !== null) {\r\n\t\teponymous = true;\r\n\t\tfactory = defer(parseTableDefinition(factory, 'used', name));\r\n\t} else {\r\n\t\tif (typeof factory !== 'function') throw new TypeError('Expected second argument to be a function or a table definition object');\r\n\t\tfactory = wrapFactory(factory);\r\n\t}\r\n\r\n\tthis[cppdb].table(factory, name, eponymous);\r\n\treturn this;\r\n};\r\n\r\nfunction wrapFactory(factory) {\r\n\treturn function virtualTableFactory(moduleName, databaseName, tableName, ...args) {\r\n\t\tconst thisObject = {\r\n\t\t\tmodule: moduleName,\r\n\t\t\tdatabase: databaseName,\r\n\t\t\ttable: tableName,\r\n\t\t};\r\n\r\n\t\t// Generate a new table definition by invoking the factory\r\n\t\tconst def = apply.call(factory, thisObject, args);\r\n\t\tif (typeof def !== 'object' || def === null) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" did not return a table definition object`);\r\n\t\t}\r\n\r\n\t\treturn parseTableDefinition(def, 'returned', moduleName);\r\n\t};\r\n}\r\n\r\nfunction parseTableDefinition(def, verb, moduleName) {\r\n\t// Validate required properties\r\n\tif (!hasOwnProperty.call(def, 'rows')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"rows\" property`);\r\n\t}\r\n\tif (!hasOwnProperty.call(def, 'columns')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition without a \"columns\" property`);\r\n\t}\r\n\r\n\t// Validate \"rows\" property\r\n\tconst rows = def.rows;\r\n\tif (typeof rows !== 'function' || Object.getPrototypeOf(rows) !== GeneratorFunctionPrototype) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"rows\" property (should be a generator function)`);\r\n\t}\r\n\r\n\t// Validate \"columns\" property\r\n\tlet columns = def.columns;\r\n\tif (!Array.isArray(columns) || !(columns = [...columns]).every(x => typeof x === 'string')) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"columns\" property (should be an array of strings)`);\r\n\t}\r\n\tif (columns.length !== new Set(columns).size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate column names`);\r\n\t}\r\n\tif (!columns.length) {\r\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with zero columns`);\r\n\t}\r\n\r\n\t// Validate \"parameters\" property\r\n\tlet parameters;\r\n\tif (hasOwnProperty.call(def, 'parameters')) {\r\n\t\tparameters = def.parameters;\r\n\t\tif (!Array.isArray(parameters) || !(parameters = [...parameters]).every(x => typeof x === 'string')) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"parameters\" property (should be an array of strings)`);\r\n\t\t}\r\n\t} else {\r\n\t\tparameters = inferParameters(rows);\r\n\t}\r\n\tif (parameters.length !== new Set(parameters).size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with duplicate parameter names`);\r\n\t}\r\n\tif (parameters.length > 32) {\r\n\t\tthrow new RangeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with more than the maximum number of 32 parameters`);\r\n\t}\r\n\tfor (const parameter of parameters) {\r\n\t\tif (columns.includes(parameter)) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with column \"${parameter}\" which was ambiguously defined as both a column and parameter`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Validate \"safeIntegers\" option\r\n\tlet safeIntegers = 2;\r\n\tif (hasOwnProperty.call(def, 'safeIntegers')) {\r\n\t\tconst bool = def.safeIntegers;\r\n\t\tif (typeof bool !== 'boolean') {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"safeIntegers\" property (should be a boolean)`);\r\n\t\t}\r\n\t\tsafeIntegers = +bool;\r\n\t}\r\n\r\n\t// Validate \"directOnly\" option\r\n\tlet directOnly = false;\r\n\tif (hasOwnProperty.call(def, 'directOnly')) {\r\n\t\tdirectOnly = def.directOnly;\r\n\t\tif (typeof directOnly !== 'boolean') {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" ${verb} a table definition with an invalid \"directOnly\" property (should be a boolean)`);\r\n\t\t}\r\n\t}\r\n\r\n\t// Generate SQL for the virtual table definition\r\n\tconst columnDefinitions = [\r\n\t\t...parameters.map(identifier).map(str => `${str} HIDDEN`),\r\n\t\t...columns.map(identifier),\r\n\t];\r\n\treturn [\r\n\t\t`CREATE TABLE x(${columnDefinitions.join(', ')});`,\r\n\t\twrapGenerator(rows, new Map(columns.map((x, i) => [x, parameters.length + i])), moduleName),\r\n\t\tparameters,\r\n\t\tsafeIntegers,\r\n\t\tdirectOnly,\r\n\t];\r\n}\r\n\r\nfunction wrapGenerator(generator, columnMap, moduleName) {\r\n\treturn function* virtualTable(...args) {\r\n\t\t/*\r\n\t\t\tWe must defensively clone any buffers in the arguments, because\r\n\t\t\totherwise the generator could mutate one of them, which would cause\r\n\t\t\tus to return incorrect values for hidden columns, potentially\r\n\t\t\tcorrupting the database.\r\n\t\t */\r\n\t\tconst output = args.map(x => Buffer.isBuffer(x) ? Buffer.from(x) : x);\r\n\t\tfor (let i = 0; i < columnMap.size; ++i) {\r\n\t\t\toutput.push(null); // Fill with nulls to prevent gaps in array (v8 optimization)\r\n\t\t}\r\n\t\tfor (const row of generator(...args)) {\r\n\t\t\tif (Array.isArray(row)) {\r\n\t\t\t\textractRowArray(row, output, columnMap.size, moduleName);\r\n\t\t\t\tyield output;\r\n\t\t\t} else if (typeof row === 'object' && row !== null) {\r\n\t\t\t\textractRowObject(row, output, columnMap, moduleName);\r\n\t\t\t\tyield output;\r\n\t\t\t} else {\r\n\t\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded something that isn't a valid row object`);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction extractRowArray(row, output, columnCount, moduleName) {\r\n\tif (row.length !== columnCount) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an incorrect number of columns`);\r\n\t}\r\n\tconst offset = output.length - columnCount;\r\n\tfor (let i = 0; i < columnCount; ++i) {\r\n\t\toutput[i + offset] = row[i];\r\n\t}\r\n}\r\n\r\nfunction extractRowObject(row, output, columnMap, moduleName) {\r\n\tlet count = 0;\r\n\tfor (const key of Object.keys(row)) {\r\n\t\tconst index = columnMap.get(key);\r\n\t\tif (index === undefined) {\r\n\t\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with an undeclared column \"${key}\"`);\r\n\t\t}\r\n\t\toutput[index] = row[key];\r\n\t\tcount += 1;\r\n\t}\r\n\tif (count !== columnMap.size) {\r\n\t\tthrow new TypeError(`Virtual table module \"${moduleName}\" yielded a row with missing columns`);\r\n\t}\r\n}\r\n\r\nfunction inferParameters({ length }) {\r\n\tif (!Number.isInteger(length) || length < 0) {\r\n\t\tthrow new TypeError('Expected function.length to be a positive integer');\r\n\t}\r\n\tconst params = [];\r\n\tfor (let i = 0; i < length; ++i) {\r\n\t\tparams.push(`$${i + 1}`);\r\n\t}\r\n\treturn params;\r\n}\r\n\r\nconst { hasOwnProperty } = Object.prototype;\r\nconst { apply } = Function.prototype;\r\nconst GeneratorFunctionPrototype = Object.getPrototypeOf(function*(){});\r\nconst identifier = str => `\"${str.replace(/\"/g, '\"\"')}\"`;\r\nconst defer = x => () => x;\r\n"},"lineCount":191}},"error":null,"hash":"84d54e9ccd4840256f9a561e6ff004a7","cacheData":{"env":{}}}
{"id":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","dependencies":[{"name":"/home/arthur/Desktop/my-webauth-app/package.json","includedInParent":true,"mtime":1740038308393},{"name":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/package.json","includedInParent":true,"mtime":1740036653603},{"name":"../util","loc":{"line":2,"column":44,"index":59},"parent":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","resolved":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/util.js"}],"generated":{"js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function pragma(source, options) {\r\n\tif (options == null) options = {};\r\n\tif (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\r\n\tconst simple = getBooleanOption(options, 'simple');\r\n\r\n\tconst stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\r\n\treturn simple ? stmt.pluck().get() : stmt.all();\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}}],"sources":{"node_modules/better-sqlite3-multiple-ciphers/lib/methods/pragma.js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function pragma(source, options) {\r\n\tif (options == null) options = {};\r\n\tif (typeof source !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\r\n\tconst simple = getBooleanOption(options, 'simple');\r\n\r\n\tconst stmt = this[cppdb].prepare(`PRAGMA ${source}`, this, true);\r\n\treturn simple ? stmt.pluck().get() : stmt.all();\r\n};\r\n"},"lineCount":13}},"error":null,"hash":"2712d6fa8daaa3351404b35fac5e9a29","cacheData":{"env":{}}}
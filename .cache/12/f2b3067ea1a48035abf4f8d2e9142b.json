{"id":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","dependencies":[{"name":"/home/arthur/Desktop/my-webauth-app/package.json","includedInParent":true,"mtime":1740038308393},{"name":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/package.json","includedInParent":true,"mtime":1740036653603},{"name":"../util","loc":{"line":2,"column":44,"index":59},"parent":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","resolved":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/util.js"}],"generated":{"js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function defineAggregate(name, options) {\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\r\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\r\n\r\n\t// Interpret options\r\n\tconst start = 'start' in options ? options.start : null;\r\n\tconst step = getFunctionOption(options, 'step', true);\r\n\tconst inverse = getFunctionOption(options, 'inverse', false);\r\n\tconst result = getFunctionOption(options, 'result', false);\r\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\r\n\tconst deterministic = getBooleanOption(options, 'deterministic');\r\n\tconst directOnly = getBooleanOption(options, 'directOnly');\r\n\tconst varargs = getBooleanOption(options, 'varargs');\r\n\tlet argCount = -1;\r\n\r\n\t// Determine argument count\r\n\tif (!varargs) {\r\n\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\r\n\t\tif (argCount > 0) argCount -= 1;\r\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\r\n\t}\r\n\r\n\tthis[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\r\n\treturn this;\r\n};\r\n\r\nconst getFunctionOption = (options, key, required) => {\r\n\tconst value = key in options ? options[key] : null;\r\n\tif (typeof value === 'function') return value;\r\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\r\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\r\n\treturn null;\r\n};\r\n\r\nconst getLength = ({ length }) => {\r\n\tif (Number.isInteger(length) && length >= 0) return length;\r\n\tthrow new TypeError('Expected function.length to be a positive integer');\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}}],"sources":{"node_modules/better-sqlite3-multiple-ciphers/lib/methods/aggregate.js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function defineAggregate(name, options) {\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof options !== 'object' || options === null) throw new TypeError('Expected second argument to be an options object');\r\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\r\n\r\n\t// Interpret options\r\n\tconst start = 'start' in options ? options.start : null;\r\n\tconst step = getFunctionOption(options, 'step', true);\r\n\tconst inverse = getFunctionOption(options, 'inverse', false);\r\n\tconst result = getFunctionOption(options, 'result', false);\r\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\r\n\tconst deterministic = getBooleanOption(options, 'deterministic');\r\n\tconst directOnly = getBooleanOption(options, 'directOnly');\r\n\tconst varargs = getBooleanOption(options, 'varargs');\r\n\tlet argCount = -1;\r\n\r\n\t// Determine argument count\r\n\tif (!varargs) {\r\n\t\targCount = Math.max(getLength(step), inverse ? getLength(inverse) : 0);\r\n\t\tif (argCount > 0) argCount -= 1;\r\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\r\n\t}\r\n\r\n\tthis[cppdb].aggregate(start, step, inverse, result, name, argCount, safeIntegers, deterministic, directOnly);\r\n\treturn this;\r\n};\r\n\r\nconst getFunctionOption = (options, key, required) => {\r\n\tconst value = key in options ? options[key] : null;\r\n\tif (typeof value === 'function') return value;\r\n\tif (value != null) throw new TypeError(`Expected the \"${key}\" option to be a function`);\r\n\tif (required) throw new TypeError(`Missing required option \"${key}\"`);\r\n\treturn null;\r\n};\r\n\r\nconst getLength = ({ length }) => {\r\n\tif (Number.isInteger(length) && length >= 0) return length;\r\n\tthrow new TypeError('Expected function.length to be a positive integer');\r\n};\r\n"},"lineCount":44}},"error":null,"hash":"083f92070ddd2db078cdb3ecd9c880a3","cacheData":{"env":{}}}
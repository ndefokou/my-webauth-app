{"id":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","dependencies":[{"name":"/home/arthur/Desktop/my-webauth-app/package.json","includedInParent":true,"mtime":1740038308393},{"name":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/package.json","includedInParent":true,"mtime":1740036653603},{"name":"../util","loc":{"line":2,"column":44,"index":59},"parent":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","resolved":"/home/arthur/Desktop/my-webauth-app/node_modules/better-sqlite3-multiple-ciphers/lib/util.js"}],"generated":{"js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function defineFunction(name, options, fn) {\r\n\t// Apply defaults\r\n\tif (options == null) options = {};\r\n\tif (typeof options === 'function') { fn = options; options = {}; }\r\n\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');\r\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\r\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\r\n\r\n\t// Interpret options\r\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\r\n\tconst deterministic = getBooleanOption(options, 'deterministic');\r\n\tconst directOnly = getBooleanOption(options, 'directOnly');\r\n\tconst varargs = getBooleanOption(options, 'varargs');\r\n\tlet argCount = -1;\r\n\r\n\t// Determine argument count\r\n\tif (!varargs) {\r\n\t\targCount = fn.length;\r\n\t\tif (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');\r\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\r\n\t}\r\n\r\n\tthis[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);\r\n\treturn this;\r\n};\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}}],"sources":{"node_modules/better-sqlite3-multiple-ciphers/lib/methods/function.js":"'use strict';\r\nconst { getBooleanOption, cppdb } = require('../util');\r\n\r\nmodule.exports = function defineFunction(name, options, fn) {\r\n\t// Apply defaults\r\n\tif (options == null) options = {};\r\n\tif (typeof options === 'function') { fn = options; options = {}; }\r\n\r\n\t// Validate arguments\r\n\tif (typeof name !== 'string') throw new TypeError('Expected first argument to be a string');\r\n\tif (typeof fn !== 'function') throw new TypeError('Expected last argument to be a function');\r\n\tif (typeof options !== 'object') throw new TypeError('Expected second argument to be an options object');\r\n\tif (!name) throw new TypeError('User-defined function name cannot be an empty string');\r\n\r\n\t// Interpret options\r\n\tconst safeIntegers = 'safeIntegers' in options ? +getBooleanOption(options, 'safeIntegers') : 2;\r\n\tconst deterministic = getBooleanOption(options, 'deterministic');\r\n\tconst directOnly = getBooleanOption(options, 'directOnly');\r\n\tconst varargs = getBooleanOption(options, 'varargs');\r\n\tlet argCount = -1;\r\n\r\n\t// Determine argument count\r\n\tif (!varargs) {\r\n\t\targCount = fn.length;\r\n\t\tif (!Number.isInteger(argCount) || argCount < 0) throw new TypeError('Expected function.length to be a positive integer');\r\n\t\tif (argCount > 100) throw new RangeError('User-defined functions cannot have more than 100 arguments');\r\n\t}\r\n\r\n\tthis[cppdb].function(fn, name, argCount, safeIntegers, deterministic, directOnly);\r\n\treturn this;\r\n};\r\n"},"lineCount":32}},"error":null,"hash":"87235d69083043872eeefe5af9e85c59","cacheData":{"env":{}}}